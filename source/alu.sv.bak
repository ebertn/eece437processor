`include "cpu_types_pkg.vh"

module alu (
  alu_if.alu aluif  
);

import cpu_types_pkg::*;

always_comb begin
    aluif.negative = aluif.outPort[31];
    aluif.overflow = 0;
    aluif.zero = aluif.outPort == '0;
    aluif.outPort = '0;

    case (aluif.aluOP)
        ALU_SLL: begin
            aluif.outPort = aluif.portA << aluif.portB; 
        end

        ALU_SRL: begin
            aluif.outPort = aluif.portA >> aluif.portB; 
        end

        ALU_AND: begin
            aluif.outPort = aluif.portA & aluif.portB; 
        end

        ALU_OR: begin
            aluif.outPort = aluif.portA | aluif.portB; 
        end
        
        ALU_XOR: begin
            aluif.outPort = aluif.portA ^ aluif.portB; 
        end

        ALU_NOR: begin
            aluif.outPort = ~(aluif.portA | aluif.portB); 
        end

        ALU_ADD: begin
            aluif.outPort = aluif.portA + aluif.portB; 
            aluif.overflow = (aluif.portA[31] && aluif.portB[31] && !aluif.outPort[31]) 
			|| (!aluif.portA[31] && !aluif.portB[31] && aluif.outPort[31]);
        end

        ALU_SUB: begin
            aluif.outPort = aluif.portA - aluif.portB; 
            aluif.overflow = (aluif.portA[31] && aluif.portB[31] && !aluif.outPort[31]) 
			|| (!aluif.portA[31] && !aluif.portB[31] && aluif.outPort[31]);
        end   

        ALU_SLT: begin
            aluif.outPort = aluif.portA[30:0] < aluif.portB[30:0] && aluif.portA[31] <= aluif.portB[31]; 
        end

        ALU_SLTU: begin
            aluif.outPort = aluif.portA < aluif.portB; 
        end
    endcase
end
endmodule